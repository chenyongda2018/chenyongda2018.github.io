<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Petrichor&#39;s blog</title>
    <link>https://chenyongda2018.github.io/categories/java/</link>
    <description>Recent content in Java on Petrichor&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Apr 2020 20:22:27 +0800</lastBuildDate><atom:link href="https://chenyongda2018.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JVM内存分配机制与回收策略选择 JVM学习笔记[2]</title>
      <link>https://chenyongda2018.github.io/posts/java/jvm%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5%E9%80%89%E6%8B%A9-jvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</link>
      <pubDate>Mon, 13 Apr 2020 20:22:27 +0800</pubDate>
      
      <guid>https://chenyongda2018.github.io/posts/java/jvm%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5%E9%80%89%E6%8B%A9-jvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</guid>
      <description>Java体系中的自动内存管理主要包括了2个方面:
自动地给对象分配内存。 自动地回收分配给对象地内存。 本文也围绕这两个点展开 一. 内存分配规则 1.优先在Eden区分配 大多数情况下，JVM会在 Eden 区优先分配对象，如果 Eden 没有足够的空间，则进行一次 Minor GC 。通过参数 -XX:+PrintGCDetails 可以让虚拟机在进行垃圾回收时打印日志，方便我们看到回收前后的内存占用情况。
例: 假如现在内存大小指定如下:
新生代 -&amp;gt;10M Eden区 -&amp;gt; 8M from区 -&amp;gt; 1M to 区 -&amp;gt; 1M 老年代 -&amp;gt; 10M 然后我们又先后在代码中创建4个对象:
byte[] byte1 = new byte[2MB]; byte[] byte2 = new byte[2MB]; byte[] byte3 = new byte[2MB]; byte[] byte4 = new byte[4MB]; 当创建完第三个对象后，Eden区已经用掉了6M的空间来存放 byte1,byte2,byte3 三个对象，再创建第四个对象时,Eden区加上一个from区已经放不下了，如先前所述，此时会触发一次 MinorGC ,将三个2MB的对象转移到老年代中，腾出Eden区的空间给 第四个对象。
所以，执行后的内存情况如下:
新生代 -&amp;gt; 10M Eden 区 -&amp;gt; 8M (剩余4M) 存放 byte4 from区 -&amp;gt; 1M to区 -&amp;gt; 1M 老年代 -&amp;gt; 10M (剩余4M) 存放byte1,byte2,byte3。 2.</description>
    </item>
    
    <item>
      <title>对象回收判定与垃圾回收算法 JVM学习笔记[1]</title>
      <link>https://chenyongda2018.github.io/posts/java/%E5%AF%B9%E8%B1%A1%E5%9B%9E%E6%94%B6%E5%88%A4%E5%AE%9A%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95-jvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Mon, 13 Jan 2020 20:21:09 +0800</pubDate>
      
      <guid>https://chenyongda2018.github.io/posts/java/%E5%AF%B9%E8%B1%A1%E5%9B%9E%E6%94%B6%E5%88%A4%E5%AE%9A%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95-jvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</guid>
      <description>本章要探究的问题 : GC在回收内存时 :
怎么判断哪些内存需要回收 ？ 什么时候回收？ 在几个线程私有的运行时区域:
虚拟机栈 程序计数器 本地方法栈 它们的内存分配和回收大多都具有确定性，随着线程的创建而产生，随着线程的停止而被回收。栈帧中的内存大小基本在类的结构确定下来时就已知。
而在线程共有的 Java堆(Heap) 和 方法区(Class(Method) Area) 这两个区域则不同：
比如，一个接口有不同的实现类(类的信息在方法区中)，这几个实现类的内存大小肯定不一，没法在运行前就已知需要多大的内存，只有在运行期间才知道创建的对象的大小。
一，哪些内存需要回收？ 在知道哪些内存需要回收之前，我们要知道怎么判断一个对象是否还存活，当它不再存活时，就回收它。而 引用计数算法 就是用来判断对象是否存活的一个算法。
1，引用计数算法（Reference Counting） 算法描述：给对象添加一个引用计数器，当有一个地方引用了它，计数器+1，当引用失效，计数器-1，在任何时刻，计数器为0时此对象将不能再被使用。
引用计数法在大多数情况下表现都不错，也有被很多公司采用的应用案例。但是在JVM中并没有采用这种算法，原因是：无法解决对象之间存在相互引用的问题。
public class Person { Object instance = null; public static void main(String[] args) { Person a = new Person(); Person b = new Person(); a.instance = b; b.instance = a; a = null; b = null;// 正常情况下在这里GC就会把a,b回收掉 } } 正常情况下在执行11-12行代码时，JVM的GC会把a,b两个对象回收，但是在引用计数算法的情况下：
执行 a=null 时,a的引用计数器值为1，因为b对象在引用它。 执行 b=null 时,b的引用计数器值为1，因为a对象在引用它。 2，可达性分析(Reachability Analysis)算法 在Java语言中是通过可达性分析来判断对象是否存活。 算法描述 : 通过一系列的 GC Roots 作为起始点，从这些起始点开始向下搜索，能搜索的到的对象说明其可用，不会被GC回收掉，搜索所走过的路径称为 引用链(Reference Chain) 。相反，如果一个对象没有到达GC Roots的路径，则说明它不可用，被判定为可被GC回收的对象。</description>
    </item>
    
  </channel>
</rss>
