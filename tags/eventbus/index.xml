<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>EventBus on Petrichor&#39;s blog</title>
    <link>https://chenyongda2018.github.io/tags/eventbus/</link>
    <description>Recent content in EventBus on Petrichor&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Jan 2023 20:29:31 +0800</lastBuildDate><atom:link href="https://chenyongda2018.github.io/tags/eventbus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>EventBus使用详解及源码解析</title>
      <link>https://chenyongda2018.github.io/posts/android/eventbus%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 05 Jan 2023 20:29:31 +0800</pubDate>
      
      <guid>https://chenyongda2018.github.io/posts/android/eventbus%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid>
      <description>EventBus是一个消息订阅/发布的开源框架。
如上图所示 , EventBus框架中主要有2个角色 :
Publisher : 发布消息的, 被观察者 Subscriber : 接收消息的 , 观察者 Publisher(被观察者) 通过 post() 将一个事件/消息(Event) 发送到事件的集中地,也就是图中的 EventBus ，EventBus 再将事件/消息(Event)发给Subcriber观察者。
使用这样的框架，能够使Activity/Fragment等组件之间的通信简化 , 不用再像以前一直使用 intent 来传送数据 , 从而提升开发效率。
1.配置依赖 在app层的 build.gradle 中添加 :
implementation &amp;#39;org.greenrobot:eventbus:3.1.1&amp;#39; 2.初步使用 根据官方文档 , 首先要定义一个Event(消息)的POJO类 :
public class MessageEvent { private String message ; public MessageEvent(String message) { this.message = message; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } } 然后 , 我们要明确哪个组件是 Subsriber(观察者), 哪个组件是Publisher(被观察者) , 在这里 , 我们通过EventBus演示一个传送消息的demo。</description>
    </item>
    
  </channel>
</rss>
