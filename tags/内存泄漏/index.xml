<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>内存泄漏 on Petrichor&#39;s blog</title>
    <link>https://chenyongda2018.github.io/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</link>
    <description>Recent content in 内存泄漏 on Petrichor&#39;s blog</description>
    <image>
      <title>Petrichor&#39;s blog</title>
      <url>https://chenyongda2018.github.io/images/profile.jpg</url>
      <link>https://chenyongda2018.github.io/images/profile.jpg</link>
    </image>
    <generator>Hugo -- 0.147.4</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 May 2022 15:26:58 +0800</lastBuildDate>
    <atom:link href="https://chenyongda2018.github.io/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android内存泄漏探究</title>
      <link>https://chenyongda2018.github.io/posts/android/android_memory_leak/</link>
      <pubDate>Sat, 14 May 2022 15:26:58 +0800</pubDate>
      <guid>https://chenyongda2018.github.io/posts/android/android_memory_leak/</guid>
      <description>&lt;h2 id=&#34;一什么是内存泄漏&#34;&gt;一.什么是内存泄漏&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;内存泄漏&lt;/code&gt;（英语：Memory leak）是在计算机科学中，由于疏忽或错误造成程序未能释放已经不再使用的内存。                                                                                                                 — — — 维基百科&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gugdlcd1bij60i20b4wet02.jpg&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;二内存泄漏的影响&#34;&gt;二.内存泄漏的影响&lt;/h2&gt;
&lt;p&gt;使得应用程序容易发生 &lt;code&gt;OOM&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android系统为每个应用分配的内存有限，若程序的发生的内存泄漏较多,会导致所需的内存超过系统所给的限额。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终:OOM → Crash&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled 1&#34; loading=&#34;lazy&#34; src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1guge4uumelj609l0gy0sy02.jpg&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;三-gc-roots&#34;&gt;三. GC Roots&lt;/h2&gt;
&lt;p&gt;对于使用可达性分析的垃圾回收算法来说，GC roots是一个比较特别的存在，它用来帮助GC判断哪些对象可以被回收，如果这个对象被是GC roots 或者被GC roots引用就不会被回收。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled 2&#34; loading=&#34;lazy&#34; src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1guge6kkyjoj61060j440402.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;哪些可以作为GC roots?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Class :&lt;/strong&gt; 被系统ClassLoader加载的class,自定义的ClassLoader加载的class不是GC roots, 注意:静态变量是属于类的。&lt;/li&gt;
&lt;li&gt;Thread: 处于活动状态的线程.&lt;/li&gt;
&lt;li&gt;Stack Local: 方法中的变量和参数.&lt;/li&gt;
&lt;li&gt;JNI Local: JNI方法中的变量和参数.&lt;/li&gt;
&lt;li&gt;JNI Global: 全局的JNI reference,也就是JNI中全局创建的引用.&lt;/li&gt;
&lt;li&gt;Monitor Used: 同步的对象,例如被 &lt;code&gt;Synchronized&lt;/code&gt;  锁住的对象.&lt;/li&gt;
&lt;li&gt;Held by JVM: 取决于各个JVM的实现,系统的ClassLoader和JVM本身会用到的一些对象.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在开发中最常见的就是方法中的变量作为GC roots,如下代码:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled 3&#34; loading=&#34;lazy&#34; src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1guge6uh97bj60w809smyg02.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们创建了80M大小的内存区域并用变量 b指向这块区域，然后我们调用gc。&lt;/p&gt;
&lt;p&gt;垃圾回收器首先进行了一次Minor GC，log中可以看到年轻代从3932K 降到了 560K，然后对象b转移到了老年代。&lt;/p&gt;
&lt;p&gt;随后垃圾回收器又进行了一次Full GC,老年代中的内存从81.9M 降到 439K, 也就是我们创建的80M内存被正常回收了。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
