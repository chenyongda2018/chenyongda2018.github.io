<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Handler on Petrichor&#39;s blog</title>
    <link>https://chenyongda2018.github.io/tags/handler/</link>
    <description>Recent content in Handler on Petrichor&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Apr 2019 20:27:16 +0800</lastBuildDate><atom:link href="https://chenyongda2018.github.io/tags/handler/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android消息机制全面解析</title>
      <link>https://chenyongda2018.github.io/posts/android/android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Fri, 19 Apr 2019 20:27:16 +0800</pubDate>
      
      <guid>https://chenyongda2018.github.io/posts/android/android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/</guid>
      <description>(1),Android消息机制概述 Android中的消息机制主要指 Handler的运行机制 以及 MessageQueue，Looper的工作过程 ，三者相互协作，保证着消息的接收，发送，处理，执行。
​ 图片来自郭神的《第一行代码》
先简单的介绍一下 Android 中 消息机制大家庭的主要成员 :
Handler : 是Android消息机制的上层接口，最为大家常用，相当于Android消息机制的入口，我们通过使用Handler发送消息来引起消息机制的循环。通常用于:在子线程执行完耗时任务完后，更新UI。
MessageQueue : 存储 消息(Message) 对象的消息队列，实则是单链表结构.
Looper : 用于无限的从 MessageQueue中取出消息，相当于消息的永动机，如果有新的消息，则处理执行，若没有，则就一直等待，堵塞。Looper** 所在的线程是 创建 Handler 时所在的线程。
主线程创建Handler时，会自动创建一个Looper,但是子线程并不会自动创建Looper
ThreadLocal : 在每个线程互不干扰的存储，提供数据，以此来获取当前线程的Looper
ActivityThread : Android 的主线程，也叫UI线程，主线程被创建时 自动初始化主线程的 Looper对象。
问题 : 大家都知道只有在UI线程才能对UI元素进行操作，在子线程更改UI就会报错，为什么？ 看完《Android艺术开发探索》 这本书的第10章之后我也才明白
Android中的UI控件不是线程安全的，如果在子线程中也能修改UI元素，那多线程的时，共同访问同一个UI元素，就会导致这个UI元素处于我们不可预知的状态，这个线程让它往左一点，那个线程让它往右一点，UI该听谁的，好tm乱。。 干脆我就只听主线程的把。 问题 : 那为什么不通过对访问UI控件的子线程加上锁机制呢 ？ 这个很简单了，如果为不同的线程访问同一UI元素加上锁机制，那我们程序员写相关代码的时候会变得超级麻烦。。。 改个UI还得考虑它是不是已经被别的线程占用了，被占用了，还得让那个线程释放锁。。。线程再多一点的话，大大地加大了程序员地工作量.
而且加上锁机制无疑会由于线程堵塞地原因降低访问UI的效率，帧率降低，体验也会不友好。
让UI元素只能再主线程访问就会省下很多事，创建一个Handler就行了。
下面从整体概述一下 消息机制的整个工作过程 :
Handler 创建时会采用当前线程的 Looper来构建内部的消息循环系统，如果Handler在子线程，则一开始是没有Looper对象的(解决方法稍后介绍)，主线程ActivityThread默认有一个Looper。
Handler创建完毕，通过 post方法传入Runnable对象，或者通过sendMessage(Message msg)发送消息。
post()方法里也是通过调用send()实现的
send()方法被调用后，调用 MessageQueue的enqueueMessage()方法将消息发送到消息队列中，等待被处理。
Looper对象运行在Handler所在的线程，从MessageQueue消息队列中不断地取出消息，处理，所以业务逻辑(通常是更新UI)就运行在Looper的线程中。
接下来从局部来分析消息机制的每个成员。
(2),ThreadLocal 工作原理 1, 什么是ThreadLocal？ ThreadLocal是一个线程内部的数据存储类，通过它可以在指定的线程中获得存储数据，获得数据，线程之间的ThreadLocal相互独立，且无法获得另一个线程的TheadLocal.</description>
    </item>
    
  </channel>
</rss>
