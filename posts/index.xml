<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Petrichor&#39;s blog</title>
    <link>https://chenyongda2018.github.io/posts/</link>
    <description>Recent content in Posts on Petrichor&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Jan 2023 20:29:31 +0800</lastBuildDate><atom:link href="https://chenyongda2018.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>EventBus使用详解及源码解析</title>
      <link>https://chenyongda2018.github.io/posts/android/eventbus%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 05 Jan 2023 20:29:31 +0800</pubDate>
      
      <guid>https://chenyongda2018.github.io/posts/android/eventbus%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid>
      <description>EventBus是一个消息订阅/发布的开源框架。
如上图所示 , EventBus框架中主要有2个角色 :
Publisher : 发布消息的, 被观察者 Subscriber : 接收消息的 , 观察者 Publisher(被观察者) 通过 post() 将一个事件/消息(Event) 发送到事件的集中地,也就是图中的 EventBus ，EventBus 再将事件/消息(Event)发给Subcriber观察者。
使用这样的框架，能够使Activity/Fragment等组件之间的通信简化 , 不用再像以前一直使用 intent 来传送数据 , 从而提升开发效率。
1.配置依赖 在app层的 build.gradle 中添加 :
implementation &amp;#39;org.greenrobot:eventbus:3.1.1&amp;#39; 2.初步使用 根据官方文档 , 首先要定义一个Event(消息)的POJO类 :
public class MessageEvent { private String message ; public MessageEvent(String message) { this.message = message; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } } 然后 , 我们要明确哪个组件是 Subsriber(观察者), 哪个组件是Publisher(被观察者) , 在这里 , 我们通过EventBus演示一个传送消息的demo。</description>
    </item>
    
    <item>
      <title>Android颜色格式区别</title>
      <link>https://chenyongda2018.github.io/posts/android/android%E9%A2%9C%E8%89%B2%E6%A0%BC%E5%BC%8F%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 13 Sep 2022 19:10:54 +0800</pubDate>
      
      <guid>https://chenyongda2018.github.io/posts/android/android%E9%A2%9C%E8%89%B2%E6%A0%BC%E5%BC%8F%E5%8C%BA%E5%88%AB/</guid>
      <description>ARGB A 是 alpha，透明度。 RGB 是 Red、Green、Blue，红色、绿色、蓝色，三种原色。
Bitmap.Config 有四种枚举类型。 ARGB_8888：ARGB 四个通道的值都是 8 位，加起来 32 位，也就是 4 个字节。每个像素点占用 4 个字节的大小。 ARGB_4444：ARGB 四个通道的值都是 4 位，加起来 16 位，也就是 2 个字节。每个像素点占用 2 个字节的大小。 RGB_565：RGB 三个通道分别是 5 位、6 位、5 位，没有 A 通道，加起来 16 位，也就是 2 个字节。每个像素点占用 2 个字节的大小。 ALPHA_8：只有 A 通道，占 8 位，1 个字节。每个像素点占用 1 个字节的大小。 那到底用哪个呢？ 很明显 ARGB_8888 的图片是质量最高的，但也是占用内存最大的。
如果想要节省内存，可以使用 ARGB_4444 或者 RGB_565。它们相比 ARGB_8888 内存占用都小了一半。 ARGB_4444 图片的失真是比较严重的。 RGB_565 图片的失真虽然很小，但是没有透明度。
ALPHA_8 只有透明度，没有颜色值。对于在图片上设置遮盖的效果的是有很有用。
总结一下！ ARGB_4444 图片失真严重，基本不用！ ALPHA_8 使用场景比较特殊！ 如果不设置透明度，RGB_565是个不错选择！ 既要设置透明度，对图片质量要求又高的化，那就用 ARGB_8888 !</description>
    </item>
    
    <item>
      <title>Android内存泄漏探究</title>
      <link>https://chenyongda2018.github.io/posts/android/android_memory_leak/</link>
      <pubDate>Sat, 14 May 2022 15:26:58 +0800</pubDate>
      
      <guid>https://chenyongda2018.github.io/posts/android/android_memory_leak/</guid>
      <description>一.什么是内存泄漏 内存泄漏（英语：Memory leak）是在计算机科学中，由于疏忽或错误造成程序未能释放已经不再使用的内存。 — — — 维基百科
二.内存泄漏的影响 使得应用程序容易发生 OOM
Android系统为每个应用分配的内存有限，若程序的发生的内存泄漏较多,会导致所需的内存超过系统所给的限额。 最终:OOM → Crash
三. GC Roots 对于使用可达性分析的垃圾回收算法来说，GC roots是一个比较特别的存在，它用来帮助GC判断哪些对象可以被回收，如果这个对象被是GC roots 或者被GC roots引用就不会被回收。
哪些可以作为GC roots?
Class : 被系统ClassLoader加载的class,自定义的ClassLoader加载的class不是GC roots, 注意:静态变量是属于类的。 Thread: 处于活动状态的线程. Stack Local: 方法中的变量和参数. JNI Local: JNI方法中的变量和参数. JNI Global: 全局的JNI reference,也就是JNI中全局创建的引用. Monitor Used: 同步的对象,例如被 Synchronized 锁住的对象. Held by JVM: 取决于各个JVM的实现,系统的ClassLoader和JVM本身会用到的一些对象. 在开发中最常见的就是方法中的变量作为GC roots,如下代码:
我们创建了80M大小的内存区域并用变量 b指向这块区域，然后我们调用gc。
垃圾回收器首先进行了一次Minor GC，log中可以看到年轻代从3932K 降到了 560K，然后对象b转移到了老年代。
随后垃圾回收器又进行了一次Full GC,老年代中的内存从81.9M 降到 439K, 也就是我们创建的80M内存被正常回收了。
再看下面一段代码
可以看到在Full GC时,分配的80M内存并没有被回收。
原因: ByteArray对象被作为GC roots的变量b持有，无法被回收
四.内存泄漏 in Android 内存泄漏的根本原因在于对象始终被GC roots引用，或者本身作为GC roots当不在使用时没有正确置空或释放。</description>
    </item>
    
    <item>
      <title>Android性能优化文章</title>
      <link>https://chenyongda2018.github.io/posts/android/android_performance/</link>
      <pubDate>Thu, 12 May 2022 19:43:48 +0800</pubDate>
      
      <guid>https://chenyongda2018.github.io/posts/android/android_performance/</guid>
      <description>1.布局优化 深入探索Android布局优化（上） 深入探索Android布局优化（中） 深入探索Android布局优化（下） 2.绘制优化 Android性能优化之绘制优化 3.卡顿优化 深入探索Android卡顿优化（上） 深入探索Android卡顿优化（下） 4.内存优化 深入探索 Android 内存优化（炼狱级别-上） 深入探索 Android 内存优化（炼狱级别-下） 5.启动速度优化 深入探索Android启动速度优化（上） 深入探索Android启动速度优化（下） 6.包体积优化 深入探索 Android 包体积优化（匠心制作-上） 深入探索 Android 包体积优化（匠心制作-下） 包体积优化 · 工具论 · 初识包体积优化 包体积优化 · 方法论 · 揭开包体积优化神秘面纱 包体积优化 · 实战论 · 怎么做包体积优化? 包体积优化 · 彩蛋篇 · Android编译期PNG自动化转换WEBP 7.APM APM监控 · 入门篇 · Android端测监控平台建设 卡顿监测 · 方案篇 · Android卡顿监测指导原则 </description>
    </item>
    
    <item>
      <title>Kotlin Lambda</title>
      <link>https://chenyongda2018.github.io/posts/android/kotlin_lamdba/</link>
      <pubDate>Sat, 16 Apr 2022 15:48:16 +0800</pubDate>
      
      <guid>https://chenyongda2018.github.io/posts/android/kotlin_lamdba/</guid>
      <description>Kotlin lambda Kotlin中，充斥着各种各样的Lambda 表达式，这是Kotlin最方便的特性之一
了解Kotlin 中的lambda，首先得知道Kotlin中的高阶函数
1.高阶函数 在Java中，如果有一个a方法，要去调用b方法，那么在里面直接调用即可。
int a() { return b(1); } a(); 接着,如果我不想把调用b方法的参数写死，希望动态设置方法b的参数。
int a(int param) { return b(param); } a(1); a(2); 这些在Java中很轻松就能做到，不过&amp;hellip; 如果我们想动态设置的不是方法参数，而是方法本身呢，比如在方法a内有一处对别的方法的调用，这个方法可能是方法b,方法c,方法d&amp;hellip;,该方法的参数类型是int,返回值类型也是int。方法a在执行时，具体需要调用哪个方法，能否动态设置? 也就是说能否将一个方法作为参数传给a?
通过接口
public interface Wrapper { int method(int param); } 将这个接口类型Wrapper 作为方法a的参数
int a(Wrapper wrapper) { return wrapper.method(1); } a(wrapper1); a(wrapper2); 举个我们常见的例子
在Android里View的点击事件
public class View { OnClickListener mOnClickListener; ... public void onTouchEvent(MotionEvent e) { ... mOnClickListener.onClick(this); ... } } OnClickListener就是一个接口，点击事件的内容全在onClick()方法里
public interface OnClickListener { void onClick(View v); } 我们在给View设置点击事件时，传的就是一个OnClickListener,本质上这样传递的是一个稍后会被调用的onClick()方法,一般称之为回调,不过由于Java中不允许直接传递方法，所以需要用接口包装一下。</description>
    </item>
    
    <item>
      <title>JVM内存分配机制与回收策略选择 JVM学习笔记[2]</title>
      <link>https://chenyongda2018.github.io/posts/java/jvm%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5%E9%80%89%E6%8B%A9-jvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</link>
      <pubDate>Mon, 13 Apr 2020 20:22:27 +0800</pubDate>
      
      <guid>https://chenyongda2018.github.io/posts/java/jvm%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5%E9%80%89%E6%8B%A9-jvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</guid>
      <description>Java体系中的自动内存管理主要包括了2个方面:
自动地给对象分配内存。 自动地回收分配给对象地内存。 本文也围绕这两个点展开 一. 内存分配规则 1.优先在Eden区分配 大多数情况下，JVM会在 Eden 区优先分配对象，如果 Eden 没有足够的空间，则进行一次 Minor GC 。通过参数 -XX:+PrintGCDetails 可以让虚拟机在进行垃圾回收时打印日志，方便我们看到回收前后的内存占用情况。
例: 假如现在内存大小指定如下:
新生代 -&amp;gt;10M Eden区 -&amp;gt; 8M from区 -&amp;gt; 1M to 区 -&amp;gt; 1M 老年代 -&amp;gt; 10M 然后我们又先后在代码中创建4个对象:
byte[] byte1 = new byte[2MB]; byte[] byte2 = new byte[2MB]; byte[] byte3 = new byte[2MB]; byte[] byte4 = new byte[4MB]; 当创建完第三个对象后，Eden区已经用掉了6M的空间来存放 byte1,byte2,byte3 三个对象，再创建第四个对象时,Eden区加上一个from区已经放不下了，如先前所述，此时会触发一次 MinorGC ,将三个2MB的对象转移到老年代中，腾出Eden区的空间给 第四个对象。
所以，执行后的内存情况如下:
新生代 -&amp;gt; 10M Eden 区 -&amp;gt; 8M (剩余4M) 存放 byte4 from区 -&amp;gt; 1M to区 -&amp;gt; 1M 老年代 -&amp;gt; 10M (剩余4M) 存放byte1,byte2,byte3。 2.</description>
    </item>
    
    <item>
      <title>对象回收判定与垃圾回收算法 JVM学习笔记[1]</title>
      <link>https://chenyongda2018.github.io/posts/java/%E5%AF%B9%E8%B1%A1%E5%9B%9E%E6%94%B6%E5%88%A4%E5%AE%9A%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95-jvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Mon, 13 Jan 2020 20:21:09 +0800</pubDate>
      
      <guid>https://chenyongda2018.github.io/posts/java/%E5%AF%B9%E8%B1%A1%E5%9B%9E%E6%94%B6%E5%88%A4%E5%AE%9A%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95-jvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</guid>
      <description>本章要探究的问题 : GC在回收内存时 :
怎么判断哪些内存需要回收 ？ 什么时候回收？ 在几个线程私有的运行时区域:
虚拟机栈 程序计数器 本地方法栈 它们的内存分配和回收大多都具有确定性，随着线程的创建而产生，随着线程的停止而被回收。栈帧中的内存大小基本在类的结构确定下来时就已知。
而在线程共有的 Java堆(Heap) 和 方法区(Class(Method) Area) 这两个区域则不同：
比如，一个接口有不同的实现类(类的信息在方法区中)，这几个实现类的内存大小肯定不一，没法在运行前就已知需要多大的内存，只有在运行期间才知道创建的对象的大小。
一，哪些内存需要回收？ 在知道哪些内存需要回收之前，我们要知道怎么判断一个对象是否还存活，当它不再存活时，就回收它。而 引用计数算法 就是用来判断对象是否存活的一个算法。
1，引用计数算法（Reference Counting） 算法描述：给对象添加一个引用计数器，当有一个地方引用了它，计数器+1，当引用失效，计数器-1，在任何时刻，计数器为0时此对象将不能再被使用。
引用计数法在大多数情况下表现都不错，也有被很多公司采用的应用案例。但是在JVM中并没有采用这种算法，原因是：无法解决对象之间存在相互引用的问题。
public class Person { Object instance = null; public static void main(String[] args) { Person a = new Person(); Person b = new Person(); a.instance = b; b.instance = a; a = null; b = null;// 正常情况下在这里GC就会把a,b回收掉 } } 正常情况下在执行11-12行代码时，JVM的GC会把a,b两个对象回收，但是在引用计数算法的情况下：
执行 a=null 时,a的引用计数器值为1，因为b对象在引用它。 执行 b=null 时,b的引用计数器值为1，因为a对象在引用它。 2，可达性分析(Reachability Analysis)算法 在Java语言中是通过可达性分析来判断对象是否存活。 算法描述 : 通过一系列的 GC Roots 作为起始点，从这些起始点开始向下搜索，能搜索的到的对象说明其可用，不会被GC回收掉，搜索所走过的路径称为 引用链(Reference Chain) 。相反，如果一个对象没有到达GC Roots的路径，则说明它不可用，被判定为可被GC回收的对象。</description>
    </item>
    
    <item>
      <title>Glide学习笔记</title>
      <link>https://chenyongda2018.github.io/posts/android/glide_study/</link>
      <pubDate>Thu, 14 Nov 2019 20:13:19 +0800</pubDate>
      
      <guid>https://chenyongda2018.github.io/posts/android/glide_study/</guid>
      <description>一.使用 1.配置依赖 在 app 层 build.gradle 中添加依赖 : dependencies { ... implementation &amp;#39;com.github.bumptech.glide:glide:4.9.0&amp;#39; annotationProcessor &amp;#39;com.github.bumptech.glide:compiler:4.9.0&amp;#39; annotationProcessor &amp;#39;androidx.annotation:annotation:1.1.0&amp;#39; ... } 添加必要权限 : &amp;lt;uses-permission android:name=&amp;#34;android.permission.INTERNET&amp;#34;/&amp;gt; &amp;lt;uses-permission android:name=&amp;#34;android.permission.ACCESS_NETWORK_STATE&amp;#34;/&amp;gt; &amp;lt;uses-permission android:name=&amp;#34;android.permission.READ_EXTERNAL_STORAGE&amp;#34; /&amp;gt; &amp;lt;uses-permission android:name=&amp;#34;android.permission.WRITE_EXTERNAL_STORAGE&amp;#34; /&amp;gt; 2.初步上手 代码 : Glide.with(context) .asBitmap() //把动图当作静止图片处理,也就是只显示gif图的第一帧 .load(&amp;#34;https://pic2.zhimg.com/v2-c4970ee756c55333b7b871c5b617d9ed_b.gif&amp;#34;)//图片url .placeholder(R.mipmap.ic_launcher) //占位符,在加载图片完成之前显示的图片 .error(R.drawable.ic_launcher_background) //加载失败时显示的图片 .fitCenter() //当图片长宽大于ImageView时,缩放图片 .fallback(R.mipmap.ic_launcher) //图片url为Null时显示的图片 .into(image1); // 放入到ImageView中 效果图 :
🎈Tips : fitCenter()与CenterCrop()区别 : fitCenter() : 效果如上图,缩放原图至ImageView大小。 CenterCrop():如下图,保持原图不变，只根据ImageView大小显示对应部分。 3.配合RecyclerView显示图片列表 1.需要加载的图片url数据源
String[] mImageList = { &amp;#34;https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/crop%3D0%2C231%2C438%&amp;#34; + &amp;#34;2C219%3BeWH%3D800%2C400/sign=b9c61bb42b3fb80e189e3b970be1031c/d50735fae6cd7b89267e2d06052442a7d9330e20.jpg&amp;#34;, &amp;#34;https://s3.ifanr.com/wp-content/uploads/2018/02/https_2F2Fhk.hypebeast.com2Ffiles2F20182F012Fdragon-ball-super-ending-anime-details-01-1.jpg&amp;#34;, &amp;#34;https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D220/sign=999dccfe8082b90139adc431438ca97e/a1ec08fa513d26970f8fef845ffbb2fb4216d88f.jpg&amp;#34;, &amp;#34;http://img5.</description>
    </item>
    
    <item>
      <title>记一次在Android中调用百度的OCR接口的经历</title>
      <link>https://chenyongda2018.github.io/posts/android/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9C%A8android%E4%B8%AD%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6%E7%9A%84ocr%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%BB%8F%E5%8E%86/</link>
      <pubDate>Fri, 10 May 2019 20:25:04 +0800</pubDate>
      
      <guid>https://chenyongda2018.github.io/posts/android/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9C%A8android%E4%B8%AD%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6%E7%9A%84ocr%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%BB%8F%E5%8E%86/</guid>
      <description>前言 最近实验室开了个新项目，是一个通过扫描单词后把扫描过的单词生成游戏来让小朋友记单词的APP，扫描单词这个功能需要用到OCR.
现在常用的OCR有
Tesseract 这个用的人比较多，而且开源，目前google正在维护，但是我尝试了一下，发现识别准确率不是特别理想。
微软的Azure上的认知服务 识别率很高，但是收费，现在有1元体验的套餐，而且不需要验证信用卡，感兴趣的同学可以试试。
百度的文字识别 之所以用这个是因为免费，不过有每天的限制次数，对于学生项目来说够用，还要什么自行车。
下面进入正文
如何在Android 中调用百度的OCR进行文字识别 1.获取百度文字识别产品服务的 Ak/Sk 1.在百度AI开放平台中进入控制台
2.找到文字识别 产品服务
3,创建应用
4,填写信息，注意这里的包名一定要和项目的包名一致
5.获得AK/SK
6.下载license文件，在项目中如果直接用AK/SK明文调用百度的OCR，很不安全，可能会被别人反编译之后获得你的AK.SK
license文件集成了AK/SK 放在项目中可以防止别人破解。 7.下载之后将获得的api.license文件放入main目录下的assets目录中
2.添加百度OCR的SDK到项目中 1.下载 百度OCR的android Sdk
2.下载的SDK压缩包将其解压，并将libs下的ocr-sdk的jar包放入项目的libs目录下 3.在main目录下新建jniLibs目录，并将libs文件夹中的其他文件放入其中
4.在app下的build,gradle中添加
将添加在libs下的sdk JAR包编译
5.这里下载的压缩包中包括了百度提供的相机扫描时的UI，在拍完照有裁剪框，比较方便，这里我们可以作为module引入项目中 3.调用百度OCR 做完准备工作我们就可以开始调用百度的OCR接口了。
首先在我们需要进行识别的页面所在的文件中创建 根据License文件初始化OCR实例的函数，并在onCreate()方法中调用
/** * 自定义license的文件路径和文件名称，以license文件方式初始化 */ private void initAccessTokenLicenseFile() { OCR.getInstance(mActivity.getApplicationContext()).initAccessToken(new OnResultListener&amp;lt;AccessToken&amp;gt;() { @Override public void onResult(AccessToken accessToken) { String token = accessToken.getAccessToken(); Log.d(TAG,token); hasGotToken = true; } @Override public void onError(OCRError error) { error.</description>
    </item>
    
    <item>
      <title>Android消息机制全面解析</title>
      <link>https://chenyongda2018.github.io/posts/android/android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Fri, 19 Apr 2019 20:27:16 +0800</pubDate>
      
      <guid>https://chenyongda2018.github.io/posts/android/android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/</guid>
      <description>(1),Android消息机制概述 Android中的消息机制主要指 Handler的运行机制 以及 MessageQueue，Looper的工作过程 ，三者相互协作，保证着消息的接收，发送，处理，执行。
​ 图片来自郭神的《第一行代码》
先简单的介绍一下 Android 中 消息机制大家庭的主要成员 :
Handler : 是Android消息机制的上层接口，最为大家常用，相当于Android消息机制的入口，我们通过使用Handler发送消息来引起消息机制的循环。通常用于:在子线程执行完耗时任务完后，更新UI。
MessageQueue : 存储 消息(Message) 对象的消息队列，实则是单链表结构.
Looper : 用于无限的从 MessageQueue中取出消息，相当于消息的永动机，如果有新的消息，则处理执行，若没有，则就一直等待，堵塞。Looper** 所在的线程是 创建 Handler 时所在的线程。
主线程创建Handler时，会自动创建一个Looper,但是子线程并不会自动创建Looper
ThreadLocal : 在每个线程互不干扰的存储，提供数据，以此来获取当前线程的Looper
ActivityThread : Android 的主线程，也叫UI线程，主线程被创建时 自动初始化主线程的 Looper对象。
问题 : 大家都知道只有在UI线程才能对UI元素进行操作，在子线程更改UI就会报错，为什么？ 看完《Android艺术开发探索》 这本书的第10章之后我也才明白
Android中的UI控件不是线程安全的，如果在子线程中也能修改UI元素，那多线程的时，共同访问同一个UI元素，就会导致这个UI元素处于我们不可预知的状态，这个线程让它往左一点，那个线程让它往右一点，UI该听谁的，好tm乱。。 干脆我就只听主线程的把。 问题 : 那为什么不通过对访问UI控件的子线程加上锁机制呢 ？ 这个很简单了，如果为不同的线程访问同一UI元素加上锁机制，那我们程序员写相关代码的时候会变得超级麻烦。。。 改个UI还得考虑它是不是已经被别的线程占用了，被占用了，还得让那个线程释放锁。。。线程再多一点的话，大大地加大了程序员地工作量.
而且加上锁机制无疑会由于线程堵塞地原因降低访问UI的效率，帧率降低，体验也会不友好。
让UI元素只能再主线程访问就会省下很多事，创建一个Handler就行了。
下面从整体概述一下 消息机制的整个工作过程 :
Handler 创建时会采用当前线程的 Looper来构建内部的消息循环系统，如果Handler在子线程，则一开始是没有Looper对象的(解决方法稍后介绍)，主线程ActivityThread默认有一个Looper。
Handler创建完毕，通过 post方法传入Runnable对象，或者通过sendMessage(Message msg)发送消息。
post()方法里也是通过调用send()实现的
send()方法被调用后，调用 MessageQueue的enqueueMessage()方法将消息发送到消息队列中，等待被处理。
Looper对象运行在Handler所在的线程，从MessageQueue消息队列中不断地取出消息，处理，所以业务逻辑(通常是更新UI)就运行在Looper的线程中。
接下来从局部来分析消息机制的每个成员。
(2),ThreadLocal 工作原理 1, 什么是ThreadLocal？ ThreadLocal是一个线程内部的数据存储类，通过它可以在指定的线程中获得存储数据，获得数据，线程之间的ThreadLocal相互独立，且无法获得另一个线程的TheadLocal.</description>
    </item>
    
  </channel>
</rss>
